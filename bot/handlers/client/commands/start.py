from enum import Enum
from random import randint
from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters.command import Command
from aiogram.filters.state import StateFilter
from aiogram.fsm.state import State, StatesGroup

# from db.operations.user_profile import delete_everithing
from handlers.common.checks import checker
from handlers.client.email import send_email
from db.operations.messages import send_msg_user
from db.operations.users import update_user, find_user
from handlers.client.shared.keyboard import create_keyboard
from handlers.client.shared.contains import contains_command


router = Router()


class StartStates(StatesGroup):
    """
    State management for handling the registration process, including email verification, profile setup, 
    and program details.
    """
    EMAIL_GET = State()
    EMAIL_SET = State()
    NAME = State()
    AGE = State()
    PROGRAM_NAME = State()
    PROGRAM_YEAR = State()
    ABOUT = State()


class StartProgramNames(Enum):
    """
    Enum class representing available program names (BAE, MAE, MAF/MIF) for the registration process.
    """
    BAE = "BAE"
    MAE = "MAE"
    MAF = "MAF/MIF"

    @classmethod
    def has_value(cls, value):
        """
        Checks if the provided value is a valid program name.
        """
        return value in cls._value2member_map_


# @router.message(StateFilter(None), Command("d"))
# async def cmd_AAAAAA(message: types.Message, state: FSMContext):
#     await delete_everithing()


@router.message(StateFilter(None), Command("start"))
@checker
async def cmd_start(message: types.Message, state: FSMContext):
    """
    Handles the /start command. Initiates the registration process or allows users to update their profile 
    if they have already registered.
    """
    exist = await find_user(message.from_user.id, ["info.email"])
    exist = exist["info"]["email"]

    if not exist:
        await send_msg_user(message.from_user.id, 
                            "–ü—Ä–∏–≤–µ—Ç!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç Random Coffee –¥–ª—è –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –†–≠–®, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ MAE'25 @vbalab –∏ @Madfyre.\n\n–í—Å—ë –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ: —Ä–∞–∑ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏, —Å —É—á—ë—Ç–æ–º —Ç–≤–æ–µ–≥–æ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –º—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø–æ–¥–±–∏—Ä–∞–µ–º —Ç–µ–±–µ –¥–≤—É—Ö –¥—Ä—É–≥–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ –∑–∞ –∫–æ—Ñ–µ.\n\n–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —ç—Ç–æ –∑–∞–π–º—ë—Ç –º–∏–Ω—É—Ç—É!")

        await send_msg_user(message.from_user.id, 
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã @nes.ru.\n\n–≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ç—ã —Å—Ç—É–¥–µ–Ω—Ç –†–≠–®")

        await state.set_state(StartStates.EMAIL_GET)
    else:
        await send_msg_user(message.from_user.id, 
                            "–ü–æ—á—Ç–∞ —É —Ç–µ–±—è —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞, –ø–æ—ç—Ç–æ–º—É –¥–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ –¥–∞–Ω–Ω—ã–º")

        await send_msg_user(message.from_user.id, 
                            "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

        await state.set_state(StartStates.NAME)

    return


@router.message(StateFilter(StartStates.EMAIL_GET))
@checker
@contains_command
async def start_email_get(message: types.Message, state: FSMContext):
    """
    Collects the user's @nes.ru email address and sends a verification code if the email is valid.
    """
    if "@nes.ru" in message.text:
        await send_msg_user(message.from_user.id,
                            "–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n–ü–æ–¥–æ–∂–¥–∏ —Å–µ–∫—É–Ω–¥–æ—á–∫—É...")

        code = str(randint(100000, 999999))

        await update_user(message.from_user.id,
                          {"cache.email": message.text, "cache.email_code": code})

        await send_email(message.text, f"–ï—â–µ —Ä–∞–∑ –ø—Ä–∏–≤–µ—Ç!\n–¢–≤–æ–π –∫–æ–¥ –¥–ª—è NEScafeBot: {code}.\n–ö–æ–¥ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ @{message.from_user.username}")

        await send_msg_user(message.from_user.id, 
                            "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–±–µ –Ω–∞ –ø–æ—á—Ç—É –∫–æ–¥ –∏–∑ 6 —Ü–∏—Ñ—Ä.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –µ–≥–æ —Å—é–¥–∞")

        await state.set_state(StartStates.EMAIL_SET)
    else:
        await send_msg_user(message.from_user.id, 
                            "–≠—Ç–æ –Ω–µ @nes.ru –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã üòï\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å",
                            fail=True)
    
    return


@router.message(StateFilter(StartStates.EMAIL_SET))
@checker
@contains_command
async def start_email_set(message: types.Message, state: FSMContext):
    """
    Verifies the email by checking the user's input against the sent verification code.
    """
    cache = await find_user(message.from_user.id, ["cache"])
    email_code = cache["cache"]["email_code"]

    if message.text.replace(' ', '') == email_code:
        email = cache["cache"]["email"]

        await update_user(message.from_user.id, 
                          {"info.email": email, "cache": {}})

        await send_msg_user(message.from_user.id, 
                            "–û—Ç–ª–∏—á–Ω–æ!\n–¢–≤–æ–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É")

        await send_msg_user(message.from_user.id, 
                            "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? üòä")

        await state.set_state(StartStates.NAME)
    else:
        await send_msg_user(message.from_user.id, 
                            "–£–ø—Å, –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥üòï\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n\nP.S. –ï—Å–ª–∏ —Ç—ã —Å–ª—É—á–∞–π–Ω–æ —É–∫–∞–∑–∞–ª –Ω–µ —Ç–æ—Ç –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –≤–≤–µ–¥–∏ /cancel –∏ –Ω–∞—á–Ω–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
                            fail=True)

    return


@router.message(StateFilter(StartStates.NAME))
@checker
@contains_command
async def start_name(message: types.Message, state: FSMContext):
    """
    Collects the user's name and moves to the next step in the registration process.
    """
    if len(message.text) < 50 and len(message.text.split(" ")) <= 3:
        await update_user(message.from_user.id, 
                          {"info.written_name": message.text})

        await send_msg_user(message.from_user.id, 
                            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")

        await state.set_state(StartStates.AGE)
    else:
        await send_msg_user(message.from_user.id, 
                            "–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ üòÖ",
                            fail=True)
    
    return


@router.message(StateFilter(StartStates.AGE))
@checker
@contains_command
async def start_age(message: types.Message, state: FSMContext):
    """
    Collects the user's age and verifies that it's a valid number within the acceptable range.
    """
    if message.text.isdigit() and int(message.text) >= 16 and int(message.text) <= 99:
        await update_user(message.from_user.id, 
                          {"info.age": message.text})

        keyboard = create_keyboard(StartProgramNames)

        await send_msg_user(message.from_user.id,
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø—Ä–æ–≥—Ä–∞–º–º—É –æ–±—É—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ",
                            reply_markup=keyboard)

        await state.set_state(StartStates.PROGRAM_NAME)
    else:
        await send_msg_user(message.from_user.id, 
                            "–•–º–º, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç üòï\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏",
                            fail=True)
    
    return


@router.message(StateFilter(StartStates.PROGRAM_NAME))
@checker
@contains_command
async def start_program_name(message: types.Message, state: FSMContext):
    """
    Collects the user's program name and ensures it's a valid option from the predefined list.
    """
    if StartProgramNames.has_value(message.text):
        await update_user(message.from_user.id, 
                          {"info.program.name": message.text})

        await send_msg_user(message.from_user.id,
                            "–¢–µ–ø–µ—Ä—å, –≤—ã–±–µ—Ä–∏ –≥–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–Ω–∞–ø—Ä., 2023)",
                            reply_markup=types.ReplyKeyboardRemove())

        await state.set_state(StartStates.PROGRAM_YEAR)
    else:
        keyboard = create_keyboard(StartProgramNames)
        await send_msg_user(message.from_user.id,
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ üòä",
                            reply_markup=keyboard)

    return


@router.message(StateFilter(StartStates.PROGRAM_YEAR))
@checker
@contains_command
async def start_program_year(message: types.Message, state: FSMContext):
    """
    Collects the user's program year and ensures it's a valid number.
    """
    year = message.text

    if year.isdigit() and int(year) >= 1990 and int(year) < 9999:
        await update_user(message.from_user.id, 
                          {"info.program.year": year})

        await send_msg_user(message.from_user.id, 
                            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ª—É—á—à–µ")

        await state.set_state(StartStates.ABOUT)
    else:
        await send_msg_user(message.from_user.id, 
                            "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≥–æ–¥ üòï\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ yyyy (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2023)",
                            fail=True)

    return


@router.message(StateFilter(StartStates.ABOUT))
@checker
@contains_command
async def start_about(message: types.Message, state: FSMContext):
    """
    Collects a short description from the user and finalizes the registration process.
    """
    if len(message.text) < 300:
        existed = await find_user(message.from_user.id, ["finished_profile"])
        existed = existed["finished_profile"]

        await update_user(message.from_user.id, 
                        {"info.about": message.text, 
                        "active_matching": "yes",
                        "finished_profile": "yes",})

        if existed == "yes":
            await send_msg_user(message.from_user.id,
                                "–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã! üéâ")
        else:
            await send_msg_user(message.from_user.id,
                                "–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üéâ\n–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /start.\n\nP.S. –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è üòâ")
            await send_msg_user(message.from_user.id, 
                                "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ üòä\n\n–ö–∞–∫ —É–∂–µ –≥–æ–≤–æ—Ä–∏–ª–æ—Å—å, –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—å —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –∫–æ—Ñ–µ —Ä–∞–∑ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –ª—é–¥—å–º–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è.\n\n–ü—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–≤–æ–π —Å–º–∞–π–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, üêò. –ê —Ç–∞–∫–∂–µ –æ—Ç 0 –¥–æ 2 —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –≤—ã–ø–∞–ª–∏, –≤–º–µ—Å—Ç–µ —Å –∏—Ö —Å–º–∞–π–ª–∞–º–∏.\n\n–°–º–∞–π–ª ‚Äî —ç—Ç–æ –∫–∞–∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã –≤—ã–ø–∞–ª –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –≤ Random Coffee.\n–ü–æ—ç—Ç–æ–º—É —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É —Ç–æ–ª—å–∫–æ –µ–≥–æ —Å–º–∞–π–ª, –∏ –æ–Ω —Å—Ä–∞–∑—É –ø–æ–π–º—ë—Ç, –ø–æ –∫–∞–∫–æ–º—É –ø–æ–≤–æ–¥—É —Ç—ã –ø–∏—à–µ—à—å!\n\n–•–æ—Ç–∏–º —É—Ç–æ—á–Ω–∏—Ç—å, —á—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–µ. –¢–æ –µ—Å—Ç—å, —Ç–µ –ª—é–¥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –≤—ã–ø–∞–¥—É—Ç, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∞—Ç —Ç–µ–±—è")
            await send_msg_user(message.from_user.id, 
                                "[–ï—Å–ª–∏ –±—É–¥—É—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –ø–æ–≤–æ–¥—É —Å–∞–º–æ–≥–æ –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Å—è –∫ —Å–æ–∑–¥–∞—Ç–µ–ª—è–º –±–æ—Ç–∞: @vbalab –∏ @Madfyre]")

        await send_msg_user(message.from_user.id, 
                            "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –ª—é–¥–µ–π –≤ —Å–≤–æ–π —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥–æ–π /blacklist, —Ç–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ–ø–∞–¥–µ—Ç—Å—è —Ç–µ–±–µ, –∞ —Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n\n–û—Ç —Ä–∞–Ω–¥–æ–º –∫–æ—Ñ–µ –º–æ–∂–Ω–æ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å, –¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å /active, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç—å —Ç–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–Ω–¥–æ–º –∫–æ—Ñ–µ")
        await send_msg_user(message.from_user.id, 
                            "Enjoy!! ‚òïÔ∏èüòä")

        await state.clear()
    else:
        await send_msg_user(message.from_user.id, 
                            "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ üòÖ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–æ—Ä–æ—á–µ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤)",
                            fail=True)

    return
